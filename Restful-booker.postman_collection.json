{
	"info": {
		"_postman_id": "4703f66c-47cd-4ba4-bf6b-ec2a17875688",
		"name": "Restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19736084"
	},
	"item": [
		{
			"name": "Ping",
			"item": [
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify the response's body contains 'token' key\", function () {\r",
									"    pm.expect(responseJson).to.have.key(\"token\");\r",
									"});\r",
									"\r",
									"let bodyToken = responseJson.token; \r",
									"pm.environment.set(\"token\", bodyToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomData = Math.random().toString(36).substring(2,7);\r",
									"\r",
									"const firstName = \"John\" + randomData;\r",
									"const lastName = \"Smith\" + randomData;\r",
									"\r",
									"pm.environment.set(\"firstName_env\", firstName);\r",
									"pm.environment.set(\"lastName_env\", lastName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the 'bookingid' key is not null\", function () {\r",
									"    pm.expect(responseJson).to.have.property('bookingid');\r",
									"    pm.expect(responseJson).to.be.not.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the first name of the customer \", function(){\r",
									"    pm.expect(responseJson.booking.firstname).to.eql(pm.environment.get(\"firstName_env\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the last name of the customer\", function() {\r",
									"    pm.expect(responseJson.booking.lastname).to.eql(pm.environment.get(\"lastName_env\"));\r",
									"})\r",
									"pm.environment.set(\"bookingId_env\", responseJson.bookingid);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{firstName_env}}\",\r\n    \"lastname\": \"{{lastName_env}}\",\r\n    \"totalprice\": 100,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-07-01\",\r\n        \"checkout\": \"2023-07-07\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"    \r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookingsIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response's body is an array\", function () {\r",
									"    pm.expect(responseJson, \"The body is not an array\").to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response's body contains an array of objects with 'bookingid' key\", function () {\r",
									"    responseJson.forEach(element => pm.expect(element, \"The object doesnt contain 'bookingid' key \").to.have.property('bookingid'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "",
									"description": "Optional: Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "",
									"description": "Optional: Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "",
									"description": "Optional: Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "",
									"description": "Optional: Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"totalprice\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"depositpaid\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"bookingdates\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"checkin\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"checkout\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"checkin\",\r",
									"        \"checkout\"\r",
									"      ]\r",
									"    },\r",
									"    \"additionalneeds\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstname\",\r",
									"    \"lastname\",\r",
									"    \"totalprice\",\r",
									"    \"depositpaid\",\r",
									"    \"bookingdates\",\r",
									"    \"additionalneeds\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingId_env}}",
									"description": "The id of the booking you would like to retrieve"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomData = Math.random().toString(36).substring(2,7);\r",
									"\r",
									"const firstName = \"John\" + randomData;\r",
									"const lastName = \"Smith\" + randomData;\r",
									"\r",
									"pm.environment.set(\"firstName_env\", firstName);\r",
									"pm.environment.set(\"lastName_env\", lastName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the first name of the customer\", function(){\r",
									"    pm.expect(responseJson.firstname).to.eql(pm.environment.get(\"firstName_env\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the last name of the customer\", function() {\r",
									"    pm.expect(responseJson.lastname).to.eql(pm.environment.get(\"lastName_env\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the customer's additional needs change\", function() {\r",
									"    pm.expect(responseJson.additionalneeds).to.eql(\"Dinner\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{firstName_env}}\",\r\n    \"lastname\": \"{{lastName_env}}\",\r\n    \"totalprice\": 100,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-07-01\",\r\n        \"checkout\": \"2023-07-07\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"    \r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingId_env}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PartialUpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the change in the customer's checkout date\", function(){\r",
									"    pm.expect(responseJson.bookingdates.checkout).to.eql(\"2023-07-06\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the change in the customer's additional needs\", function() {\r",
									"    pm.expect(responseJson.additionalneeds).to.eql(\"Breakfast, Dinner\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-07-01\",\r\n        \"checkout\": \"2023-07-06\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast, Dinner\"    \r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingId_env}}",
									"description": "ID for the booking you want to update"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingId_env}}",
									"description": "ID for the booking you want to delete"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDeletedBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingId_env}}",
									"description": "The id of the deleted booking"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}